name: Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      cassandra:
        image: cassandra:4.1
        env:
          CASSANDRA_CLUSTER_NAME: test-cluster
          CASSANDRA_DC: datacenter1
          CASSANDRA_RACK: rack1
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s

    strategy:
      matrix:
        ruby-version: ['3.0', '3.1', '3.2', '3.3']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libuv1-dev libssl-dev cmake
        # Try to install from Ubuntu repos first, then build from source if needed
        if ! sudo apt-get install -y libcassandra2 libcassandra-dev 2>/dev/null; then
          echo "Package not available, building from source..."
          # Build DataStax C++ driver from source
          git clone https://github.com/datastax/cpp-driver.git
          cd cpp-driver
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../..
        fi

    - name: Install Ruby dependencies
      run: |
        gem install bundler
        bundle install

    - name: Wait for Cassandra to be ready
      run: |
        echo "Waiting for Cassandra to start..."
        for i in {1..30}; do
          if timeout 10 bash -c "</dev/tcp/127.0.0.1/9042" 2>/dev/null; then
            echo "Cassandra port is open, waiting for service..."
            sleep 10
            if docker exec $(docker ps -q --filter "ancestor=cassandra:4.1") cqlsh -e "SELECT now() FROM system.local;" 2>/dev/null; then
              echo "Cassandra is ready!"
              break
            fi
          fi
          echo "Attempt $i: Cassandra not ready, waiting 10 seconds..."
          sleep 10
        done

    - name: Compile extension
      run: bundle exec rake compile

    - name: Run tests
      run: bundle exec rake test

    - name: Run linting
      run: bundle exec rake standard

  test-coverage:
    runs-on: ubuntu-latest
    
    services:
      cassandra:
        image: cassandra:4.1
        env:
          CASSANDRA_CLUSTER_NAME: test-cluster
          CASSANDRA_DC: datacenter1
          CASSANDRA_RACK: rack1
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby 3.3
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libuv1-dev libssl-dev cmake
        # Try to install from Ubuntu repos first, then build from source if needed
        if ! sudo apt-get install -y libcassandra2 libcassandra-dev 2>/dev/null; then
          echo "Package not available, building from source..."
          # Build DataStax C++ driver from source
          git clone https://github.com/datastax/cpp-driver.git
          cd cpp-driver
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../..
        fi

    - name: Install Ruby dependencies
      run: |
        gem install bundler
        bundle install

    - name: Wait for Cassandra to be ready
      run: |
        echo "Waiting for Cassandra to start..."
        for i in {1..30}; do
          if timeout 10 bash -c "</dev/tcp/127.0.0.1/9042" 2>/dev/null; then
            echo "Cassandra port is open, waiting for service..."
            sleep 10
            if docker exec $(docker ps -q --filter "ancestor=cassandra:4.1") cqlsh -e "SELECT now() FROM system.local;" 2>/dev/null; then
              echo "Cassandra is ready!"
              break
            fi
          fi
          echo "Attempt $i: Cassandra not ready, waiting 10 seconds..."
          sleep 10
        done

    - name: Compile extension
      run: bundle exec rake compile

    - name: Run tests with coverage
      run: COVERAGE=true bundle exec rake test
      env:
        COVERAGE: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false